plugins {
    // used for something??
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    // used for multi-loader stuff, NOT for the archi API
    id 'architectury-plugin' version '3.4-SNAPSHOT'

    id "org.jetbrains.kotlin.jvm"

    id "at.petra-k.pkpcpbp.PKPlugin" version "0.2.0-pre-103"
    id "at.petra-k.pkpcpbp.PKSubprojPlugin" version "0.2.0-pre-103" apply false
    id "at.petra-k.pkpcpbp.PKJson5Plugin" version "0.2.0-pre-103" apply false
}

architectury {
    minecraft = project.minecraftVersion
}

pkpcpbp {
    superDebugInfo = true

    doProjectMetadata = true
    setupJarMetadata = true
    setupMavenMetadata = true
    javaVersion = 21

    modInfo {
        modID = project.modID
        mcVersion = project.minecraftVersion
        modVersion = project.modVersion
    }
    curseforgeInfo {
        id = 569849
        stability = "beta"
        token = System.getenv("CURSEFORGE_TOKEN")
    }
    modrinthInfo {
        id = "nTW3yKrm"
        stability = "beta"
        token = System.getenv("MODRINTH_TOKEN")
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: "at.petra-k.pkpcpbp.PKSubprojPlugin"
    apply plugin: "at.petra-k.pkpcpbp.PKJson5Plugin"

    loom {
        silentMojangMappingsLicense() // heroes in a half-shell
    }
    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraftVersion"
        mappings loom.officialMojangMappings()
    }

    sourceSets.main.kotlin.srcDirs += 'src/main/java'

    if (project.path != ':Common') {
        loom {
            mods {
                main { // to match the default mod generated for Forge
                    sourceSet project.sourceSets.main
                    sourceSet project(':Common').sourceSets.main
                }
            }
        }
    }

    pkJson5 {
        autoProcessJson5 = true
        autoProcessJson5Flattening = true
    }
    processResources {
        exclude '.cache'
    }

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

}

allprojects {
    architectury {
        compileOnly()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }

    // disable most javadoc warnings
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

tasks.register("runAllDatagen") {
    dependsOn ":Forge:runXplatDatagen"
    dependsOn ":Forge:runForgeDatagen"
    dependsOn ":Fabric:runDatagen"
}
