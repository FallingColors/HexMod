architectury {
    common([/*"fabric", */"neoforge"])
}

loom {
    accessWidenerPath = file("src/main/resources/hexplat.accesswidener")
}

pkSubproj {
    platform = "common"
    pkPublish = false
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url 'https://maven.blamejared.com' }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { url "https://maven.shedaniel.me/" }
    // accessories
    maven { url 'https://maven.wispforest.io/releases' }
    // EMI
    maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // === MANDATORY DEPS ===
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modCompileOnly "at.petra-k:paucal:$paucalVersion+$minecraftVersion-common"
    // i do not know why the xplat and mod jars are in different coordinates
    modCompileOnly "vazkii.patchouli:Patchouli-xplat:1.21-$patchouliVersion-SNAPSHOT"
    modCompileOnly "com.samsthenerd.inline:inline-common:1.21.1-1.2.2-74"

    // === OPTIONAL DEPS ===
    modCompileOnly "dev.emi:emi-xplat-intermediary:${emiVersion}:api"
    modCompileOnly "io.wispforest:accessories-common:$accessoriesVersion"

    // === OTHER STUFF ===
    compileOnly "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    testCompileOnly "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

}

test {
    useJUnitPlatform()
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {
        expand buildProps
    }
}

// it wants a task by this name to exist for some reason
task("prepareWorkspace") {}
