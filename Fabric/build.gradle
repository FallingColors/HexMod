plugins {
    // id 'fabric-loom' version "1.8.9"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

pkSubproj {
    platform = "fabric"
    pkPublish = true

    curseforgeJar = remapJar.archiveFile
    curseforgeDependencies[]
    modrinthJar = remapJar.archiveFile
    modrinthDependencies[]
}


loom {
    mixin.defaultRefmapName = "hexcasting.mixins.refmap.json"

    accessWidenerPath = file("src/main/resources/fabricasting.accesswidener")

    runs {
        client {
            client()
            setConfigName("Fabric Client")
        }
        server {
            server()
            setConfigName("Fabric Server")
        }
        datagen {
            client()
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${modID}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
        }

        configureEach {
            runDir "Fabric/run"
            ideConfigGenerated(true)
        }
    }
}

// god only knows what the hell this does
configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    mavenCentral()

    // paucal and patchi
    maven { url = 'https://maven.blamejared.com' }
    // modmenu and clothconfig
    maven { url "https://maven.shedaniel.me/" }
    // Cardinal Components
    maven { url 'https://maven.ladysnake.org/releases' }
    maven { url "https://mvn.devos.one/snapshots/" }
    // EMI
    maven { url = "https://maven.terraformersmc.com/releases/" }
    exclusiveContent {
        forRepository {
            maven { url = "https://api.modrinth.com/maven" }
        }
        filter { includeGroup "maven.modrinth" }
    }
    // pehkui
    maven { url = "https://jitpack.io" }
    // accessories
    maven { url 'https://maven.wispforest.io/releases' }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-language-kotlin:${fabricLanguageKotlinVersion}")
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"

    common(project(path: ':Common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':Common', configuration: 'transformProductionFabric')

    // === MANDATORY DEPS ===
    modImplementation "at.petra-k:paucal:$paucalVersion+$minecraftVersion-fabric"
    // dear mod devs, don't put the platform in the middle of your version code
    modImplementation "vazkii.patchouli:Patchouli:1.21-$patchouliVersion-FABRIC-SNAPSHOT"
//    modImplementation "com.samsthenerd.inline:inline-fabric:$minecraftVersion-$inlineVersion"
    modImplementation "io.wispforest:accessories-fabric:$accessoriesVersion"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:$cardinalComponentsVersion"
//    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-util:$cardinalComponentsVersion"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:$cardinalComponentsVersion"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:$cardinalComponentsVersion"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:$cardinalComponentsVersion"

    // apparently the 1.18 version Just Works on 1.19
    modImplementation "${modID}:serialization-hooks:$serializationHooksVersion"
    include "${modID}:serialization-hooks:$serializationHooksVersion"
    implementation(include("com.github.LlamaLad7:MixinExtras:0.1.1"))

    // === OPTIONAL DEPS ===

    modApi("me.shedaniel.cloth:cloth-config-fabric:$clothConfigVersion") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly "dev.emi:emi-fabric:${emiVersion}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emiVersion}"

//    modImplementation "maven.modrinth:gravity-api:$gravityApiVersion"
    modApi("com.github.Virtuoel:Pehkui:${pehkuiVersion}", {
        exclude group: "net.fabricmc.fabric-api"
    })

    // *Something* is including an old version of modmenu with a broken mixin
    // We can't figure out what it is
    // so i'm just including a fresher version
    modImplementation("com.terraformersmc:modmenu:$modmenuVersion")

    // i am speed
    // sodium is causing frustum mixin errors so don't use it
//    modImplementation "maven.modrinth:sodium:${sodiumVersion}"
    modImplementation "maven.modrinth:lithium:${lithiumVersion}"
//    modImplementation "maven.modrinth:phosphor:${phosphorVersion}"

    // === OTHER STUFF ===
    compileOnly "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    testCompileOnly "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    compileOnly "com.demonwav.mcdev:annotations:1.0"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}
compileKotlin {
    source(project(":Common").sourceSets.main.kotlin)
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

sourceSets {
    main.resources.srcDirs += ['src/generated/resources', '../Common/src/generated/resources']
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
