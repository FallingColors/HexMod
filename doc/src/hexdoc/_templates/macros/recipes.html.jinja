{# show the names of all the recipe results in a list of recipes #}
{% macro generic(recipes, result_attribute, description, separator) -%}
  <blockquote class="crafting-info">
    {{ description }} {{
      recipes
      |map(attribute="result."~result_attribute)
      |map("hexdoc_wrap", "code")
      |join(separator)
    }}.
  </blockquote>
{%- endmacro %}

{# display a single item, with a badge if the count is greater than 1 #}
{% macro render_item(item, count=1, always_show_count=false) -%}
  {% if item.texture.meta %}
    <div
      role="img"
      title="{{ item.name }}"
      aria-label="Animated image of {{ item.name }}"
      class="texture animated-sync {{ item.texture.class_name }}"
    ></div>
  {% else %}
    <img
      title="{{ item.name }}"
      alt="Image of {{ item.name }}"
      src="{{ item.texture.url }}"
      loading="lazy"
      class="texture"
    >
  {% endif %}

  {% if always_show_count or count > 1 %}
    <div class="badge">{{ count }}</div>
  {% endif %}
{%- endmacro %}

{% macro render_ingredients(ingredients) -%}
  {% for ingredient in ingredients %}
    {% if ingredient.type|string == "hexcasting:mod_conditional" %}
      {# recursion! what could possibly go wrong? #}
      {{- render_ingredients(ingredient.default) -}}
    {% else %}
      {{- render_item(ingredient.item) -}}
    {% endif %}
  {% endfor %}
{%- endmacro %}

{# render a crafting table for each recipe #}
{% macro crafting_table(recipes) -%}
  {% for recipe in recipes %}
    <details class="details-collapsible crafting-table-details">
      <summary class="collapse-details">
        <span class="collapse-recipe-show">{{ _('hexdoc.recipe.show').format(recipe.result.item.name) }}</span>
        <span class="collapse-recipe-hide">{{ _('hexdoc.recipe.hide').format(recipe.result.item.name) }}</span>
      </summary>
      <div class="crafting-table">
        <img
          alt="Crafting table"
          src="{{ 'hexcasting:textures/gui/hexdoc/crafting_table.png'|hexdoc_texture }}"
        >
        
        <div class="crafting-table-grid">
          {% for cell_ingredients in recipe.ingredients %}
            {% if cell_ingredients is none %}
              <div></div> {#- empty slot / air #}
            {% else %}
              <div class="cycle-textures">
                {{ render_ingredients(cell_ingredients) }}
              </div>
            {% endif %}
          {% endfor %}
        </div>

        <div class="crafting-table-result">
          {{ render_item(recipe.result.item, recipe.result.count) }}
        </div>
      </div>
    </details>
  {% endfor %}
{%- endmacro %}